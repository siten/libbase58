// base58_demo.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>

bool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz);
bool b58enc(char *b58, size_t *b58sz, const void *bin, size_t binsz);

int main()
{
    char data[347] = {
    0xB9, 0x75, 0x74, 0x00, 0xF0, 0x30, 0x19, 0x19, 0x00, 0xDA, 0x32, 0xA8, 0xD0, 0xE0, 0xB2, 0xC9,
    0x16, 0x97, 0x4E, 0x36, 0x39, 0x75, 0x8C, 0x89, 0x99, 0xE1, 0x57, 0x28, 0x6A, 0xC3, 0xEB, 0xAB,
    0x1D, 0x9E, 0x7F, 0xD7, 0x66, 0xC1, 0xFB, 0x0E, 0x55, 0x35, 0x9E, 0x7D, 0xB6, 0x8F, 0x17, 0x1D,
    0x00, 0x3C, 0x4C, 0xC6, 0x07, 0x80, 0xB6, 0xF4, 0x2B, 0x30, 0x38, 0xFF, 0x24, 0x93, 0x73, 0x4F,
    0x32, 0x99, 0x71, 0x82, 0x49, 0xDF, 0xDC, 0xCC, 0xB8, 0x5C, 0xFB, 0x0E, 0x09, 0xFE, 0xB9, 0xDC,
    0xE1, 0xE5, 0x15, 0x0E, 0xAF, 0x7E, 0xE8, 0x70, 0xD0, 0xBB, 0x03, 0x7A, 0xDD, 0x41, 0x07, 0x00,
    0x0F, 0xE3, 0xAB, 0x00, 0xD0, 0x16, 0xCB, 0x84, 0x53, 0x46, 0xB8, 0x69, 0xC4, 0x4E, 0x1B, 0xE3,
    0xF6, 0x0E, 0xF2, 0x3C, 0x32, 0x25, 0xA5, 0xBA, 0x4E, 0xB0, 0x64, 0x9D, 0xE0, 0xCD, 0x8F, 0x1C,
    0xDE, 0x5A, 0xEB, 0xB0, 0x72, 0x9B, 0x83, 0xE3, 0x2B, 0x9F, 0x3F, 0x02, 0x1D, 0x00, 0x3C, 0x4C,
    0x39, 0xB0, 0x59, 0xB5, 0x88, 0x74, 0x60, 0x99, 0x50, 0x31, 0xD4, 0xE4, 0xE4, 0x72, 0x83, 0x13,
    0x87, 0x9B, 0x9C, 0x34, 0xDC, 0xE0, 0xF8, 0x52, 0x93, 0x9C, 0x50, 0x6A, 0xDB, 0xAD, 0x6D, 0x84,
    0x55, 0x1F, 0x3B, 0xAC, 0xD8, 0xEA, 0xB0, 0x72, 0xAB, 0x60, 0xF9, 0x16, 0x87, 0xF5, 0xBB, 0x44,
    0x4F, 0x5A, 0x07, 0x91, 0x8B, 0xC2, 0xE9, 0xE6, 0xB2, 0xF1, 0x5B, 0x00, 0xF0, 0xCC, 0x4C, 0x40,
    0x15, 0x18, 0x06, 0x94, 0xF4, 0x35, 0x18, 0x59, 0x62, 0x30, 0x62, 0x80, 0xC1, 0xF0, 0x01, 0x6E,
    0x32, 0xCE, 0xFE, 0x05, 0x06, 0x03, 0x0A, 0x0C, 0x8A, 0xF3, 0x21, 0x2F, 0xC7, 0xE8, 0xF0, 0x8D,
    0x43, 0x43, 0x04, 0xEA, 0x9A, 0x04, 0xFB, 0x6A, 0x60, 0xF7, 0x01, 0xC1, 0xFE, 0x5A, 0xC1, 0x9E,
    0x03, 0x82, 0x2D, 0x9F, 0x0A, 0xB6, 0xEC, 0x11, 0x6C, 0xD8, 0x2D, 0x32, 0x21, 0x71, 0x67, 0xAA,
    0xF1, 0x95, 0xCF, 0xF8, 0xEA, 0x8F, 0xC1, 0x4D, 0xD9, 0xB4, 0x5B, 0xB5, 0x88, 0x4C, 0xC0, 0xDD,
    0x2C, 0xC4, 0xBD, 0xFC, 0x91, 0xC3, 0x22, 0x53, 0x47, 0xE4, 0xD3, 0x8D, 0xC0, 0x67, 0x2B, 0x68,
    0xFD, 0x36, 0x4B, 0xDD, 0x1F, 0x5B, 0x50, 0xA4, 0x81, 0x86, 0x08, 0x34, 0xD0, 0xE3, 0xEF, 0xE6,
    0x89, 0x52, 0xAB, 0x5A, 0x80, 0x6C, 0x7C, 0x15, 0x00, 0x6E, 0x0F, 0x87, 0xC7, 0x87, 0x0D, 0x83,
    0x85, 0xD1, 0x28, 0xCB, 0x62, 0x31, 0x32, 0x6F, 0xDF, 0x09, 0x8D
    };

    char *pencode_buf = nullptr;
    size_t out_encodelen = 0;
    char *pdecode_buf = nullptr;
    size_t decode_totallen = 0;
    size_t out_decodelen = 0;

    bool bret = b58enc(pencode_buf, &out_encodelen, data, sizeof(data));
    pencode_buf = new char[out_encodelen];
    bret = b58enc(pencode_buf, &out_encodelen, data, sizeof(data));

    decode_totallen = out_encodelen - 1;
    pdecode_buf = new char[decode_totallen];
    out_decodelen = decode_totallen;
    bret = b58tobin(pdecode_buf, &out_decodelen, pencode_buf, decode_totallen);

    char *ptmp = pdecode_buf + (decode_totallen - out_decodelen);
    //memmove_s(pdecode_buf, decode_totallen, pdecode_buf + (decode_totallen - out_decodelen), out_decodelen);

    if (0 != memcmp(ptmp, data, out_decodelen)) {
        std::cout << "error!\n";
    }
    else {
        std::cout << "ok\n";
    }

    if (pencode_buf) {
        delete[] pencode_buf;
    }
    if (pdecode_buf) {
        delete[] pdecode_buf;
    }

}
